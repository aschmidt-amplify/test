name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Ensure a stable version of checkout action is used

      - name: Get version from DESCRIPTION
        id: version
        run: |
          version=$(grep '^Version: ' DESCRIPTION | sed 's/Version: //')
          echo "version=${version}" >> $GITHUB_ENV

      - name: Check if Tag Exists on Remote
        id: check_tag_exists
        run: |
          if git ls-remote --tags origin "v${{ env.version }}" | grep "refs/tags/v${{ env.version }}" >/dev/null; then
            echo "Tag v${{ env.version }} already exists on remote."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Exit if Tag Exists
        if: env.exists == 'true'
        run: |
          echo "::warning ::The tag v${{ env.version }} already exists. Exiting without creating a new release."
          exit 0

      - name: Tag the current commit
        if: env.exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${{ env.version }}" -m "Release v${{ env.version }}"
          git push origin "v${{ env.version }}"

      - name: Create Changelog
        if: env.exists == 'false'
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "COMMIT"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "contributors": "#{{CONTRIBUTORS}}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: env.exists == 'false'
        run: |
          changelog=$(cat ./YOUR_CHANGELOG_PATH) # Ensure you have the output path correct from the changelog action
          gh release create "v${{ env.version }}" --title "v${{ env.version }}" --notes "$changelog"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
